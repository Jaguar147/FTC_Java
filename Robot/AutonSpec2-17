package org.firstinspires.ftc.teamcode;
import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorSimple;
import com.qualcomm.robotcore.hardware.DcMotorEx;

@Autonomous 
public class Auton6 extends LinearOpMode {


//Wheels
     DcMotorEx fL;
     DcMotorEx fR;
     DcMotorEx bL;
     DcMotorEx bR;

    int fL_pos;
    int fR_pos;
    int bL_pos;
    int bR_pos;

//Arms
  DcMotor shoulder;
  DcMotor elbow;

   int shoulder_pos;
   int elbow_pos;


//Servos
  Servo intake;
  Servo wrist;

@Override 
    public void runOpMode () {

//Hardware Map

//Wheels   
        fL = hardwareMap.get(DcMotorEx.class, "frontLeft");
        fR = hardwareMap.get(DcMotorEx.class, "frontRight");
        bL = hardwareMap.get(DcMotorEx.class, "backLeft");
        bR = hardwareMap.get(DcMotorEx.class, "backRight");

fL.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
fR.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
bL.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
bR.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);

//may change based on how wheels turn
fR.setDirection(DcMotor.Direction.REVERSE);
bR.setDirection(DcMotor.Direction.REVERSE);

    fL_pos = 0;
    fR_pos = 0;
    bL_pos = 0;
    bR_pos = 0;


//Arms
shoulder = hardwareMap.get(DcMotor.class, "shoulder");
shoulder.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
shoulder.setDirection(DcMotor.Direction.REVERSE);
shoulder.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);

elbow = hardwareMap.get(DcMotor.class, "elbow");
elbow.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
elbow.setDirection(DcMotor.Direction.REVERSE);
elbow.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);


//Servos
intake = hardwareMap.get(Servo.class, "intake");
wrist = hardwareMap.get(Servo.class, "wrist");


waitForStart();
    
  
firstSpecimen();
secondSpecimen();

}


private void firstSpecimen () {
specArmOut (1);
sleep(700);
backDrive (23, 350);
//forwardDrive(5,700);
specShoulderIn (0.4);
//0.45
specArmIn (1);
}



private void secondSpecimen () {
//Intake Specimen
turnRight(19, 1000);
backDrive(15,1000);
leftDrive(12,1000);
sampleArm(0.7);
backDrive(15,250);
//9
sleep(1000);
specArmIn (1);
turnLeft(21,700);
rightDrive(23,700);
specArmOut(1);
backDrive(14,800);
specShoulderIn(0.45);
specArmIn(0.5);

//Park
//fL_Drive(70,1000);

} 


 private void settingTarget (int fL_inches, int fR_inches, int bL_inches, int bR_inches) {

    double ticksPerInch = 29.8497937569;
    
    int fL_target = (int)(ticksPerInch * fL_inches);
    int fR_target = (int)(ticksPerInch * fR_inches);
    int bR_target = (int)(ticksPerInch * bR_inches);
    int bL_target =  (int)(ticksPerInch * bL_inches);

        fL.setTargetPosition(fL_pos + fL_target);
        fR.setTargetPosition(fR_pos + fR_target);
        bL.setTargetPosition(bL_pos + bL_target);
        bR.setTargetPosition(bR_pos + bR_target);

        // Update the positions for the next move
        fL_pos += fL_target;
        fR_pos += fR_target;
        bL_pos += bL_target;
        bR_pos += bR_target;

        // Set motor modes to RUN_TO_POSITION
        fL.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        fR.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        bL.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        bR.setMode(DcMotor.RunMode.RUN_TO_POSITION);
    }
    
     private void settingVelocity (double velocity) {
        fL.setVelocity(velocity);
        fR.setVelocity(velocity);
        bL.setVelocity(velocity);
        bR.setVelocity(velocity);

//((fl.isBusy || fR.isBusy()))
        // Wait for motors to reach the target positions
        int busyWheels = 0;
        while (opModeIsActive() && fL.isBusy() && fR.isBusy() && bL.isBusy() && bR.isBusy()) {
            // You can add telemetry here if needed to monitor progress
          
            if(fL.isBusy())
            {
                busyWheels++;
            }
             if(fR.isBusy())
            {
                busyWheels++;
            }
            if (bL.isBusy())
            {
             busyWheels++;
            }
            if (bR.isBusy()) {
                busyWheels++;
            }
            if(busyWheels == 1)
        {
            busyWheels = 0;
            break;
        }
             
            
        }

        // Stop motors once target is reached
        fL.setPower(0);
        fR.setPower(0);
        bL.setPower(0);
        bR.setPower(0);
    }
    
     private void forwardDrive(int inches, double velocity) {
       settingTarget(inches, inches, inches, inches);
        settingVelocity (velocity);
    }

  private void rightDrive(int inches, double velocity) {
       settingTarget(inches, -inches, -inches, inches);
        settingVelocity (velocity);
    }

  private void leftDrive(int inches, double velocity) {
       settingTarget(-inches, inches, inches, -inches);
        settingVelocity (velocity);
    }

  private void backDrive(int inches, double velocity) {
       settingTarget(-inches, -inches, -inches, -inches);
        settingVelocity (velocity);
    }
    
     private void turnRight (int inches, double velocity) {
       settingTarget(inches, -inches, inches, -inches);
        settingVelocity (velocity);
        wrist.setPosition(0.55);
    }

  private void turnLeft (int inches, double velocity) {
       settingTarget(-inches, inches, -inches, inches);
        settingVelocity (velocity);
    }


  private void fL_Drive (int inches, double velocity) {
       settingTarget(-inches, inches, inches, 0);
        settingVelocity (velocity);
    }

    
    private void specArmOut (double armSpeed) {
       //   backDrive (4, 400);
          
        int shoulderTarget = (530);
        //540
        //375
          shoulder.setTargetPosition(shoulderTarget);
            shoulder.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            shoulder.setPower(armSpeed);

         wrist.setPosition(0.88);

        int elbowTarget = (1600);
        //960
         elbow.setTargetPosition(elbowTarget);
           elbow.setMode(DcMotor.RunMode.RUN_TO_POSITION);
           elbow.setPower(armSpeed);
           
         intake.setPosition(0);
}

private void specArmIn (double armSpeed) {             
    forwardDrive(6,600);
  
         elbow.setTargetPosition(10);
           elbow.setMode(DcMotor.RunMode.RUN_TO_POSITION);
           elbow.setPower(armSpeed);

        int shoulderTarget2 = (10);
          shoulder.setTargetPosition(shoulderTarget2);
            shoulder.setMode(DcMotor.RunMode.RUN_TO_POSITION);
             shoulder.setPower(armSpeed);
            
}

private void specShoulderIn (double armSpeed) {
          
            intake.setPosition(0.5);

        int shoulderTarget = (270);
          shoulder.setTargetPosition(shoulderTarget);
            shoulder.setMode(DcMotor.RunMode.RUN_TO_POSITION);
             shoulder.setPower(armSpeed);
             specArmIn(1);
}


private void sampleArm(double armSpeed) {
         
            intake.setPosition(0);

          shoulder.setTargetPosition(280);
            shoulder.setMode(DcMotor.RunMode.RUN_TO_POSITION);
             shoulder.setPower(armSpeed);
          elbow.setTargetPosition(2205);
          //2220
            elbow.setMode(DcMotor.RunMode.RUN_TO_POSITION);
             elbow.setPower(armSpeed);
             sleep(500);

}


}



